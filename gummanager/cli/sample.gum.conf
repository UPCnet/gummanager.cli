---
  maxserver_buildout_uri: https://github.com/UPCnet/maxserver
  maxserver_buildout_branch: develop

  ldap:
    server: "ldaps://host:port"          # Full server address including connection type and port
    name: ""                             # String to identify this server (used to give a name for acl_users plugin)
    readonly: true                       # Set this to false if don't want to write to the server
    admin_dn: ""                         # Full dn of a user that can bind, add users, add groups, and branches (if enabled)
    admin_password: ""                   # Password for the admin_dn
    users_base_dn: ""                    # Base dn for the users on this ldap, include ou="{branch}" where suits if using branches
    user_scope: "SCOPE_SUBTREE"          # SCOPE_SUBTREE or SCOPE_ONELEVEL, depending if you want to search descendants
    group_base_dn: ""                    # Base dn for the groups on this ldap, include ou="{branch}" where suits if using branches
    group_scope: "SCOPE_SUBTREE"         # SCOPE_SUBTREE or SCOPE_ONELEVEL, depending if you want to search descendants
    branches:
      enabled: false                     # If enabled, some settings in this section will override when making operations inside a branch
      base_dn: ""                        # base dn for branches, ou="" will bre prepended with the name of the branch
      admin_cn: "ldap"                   # CN of a the user (NOT full dn !!) that can add users inside the branches. DN will be constructed joined with base_dn
      admin_password: ""                 # Password of for the admin_cn, This password and the admin_cn are the same for all branches
      restricted_cn: "restricted"        # Special user without privileges outside the user scope
      base_users:                        # Pairs of username, password of users that will be created always on new branches
      - username: "user1"
        password: "password"

  oauth:
    python_interpreter: "/var/python/python2.7/bin/python" # which python will be used to bootstrap the buildout
    cfg_file: "osiris-only.cfg"          # cfg file that will be used to create this oauth
    server_dns: ""                       # public dns where this oauth server is located, used to generate nginx configurations
    server: ""                           # address of server where oauths are located, used to access by ssh
    ssh_user: "root"                     # username to use to access by ssh to server, keyfile access must be enabled
    local_git_branch: "local"            # Name of branch where to store custom configurations
    instances_root: "/var/oauth"         # Path to the root folder where all oauth instances are created
    process_uid: "pyramid"               # Name of user that will own the oauth process
    nginx:                               # Settings to access the server where nginx is installed, used to add new instances
      root: "/var/nginx"
      server: ""
      ssh_user: "root"
    supervisor:                          # Location and settings of the supervisor process that will control oauth
      path: "/var/supervisor"
      port: "13001"
      password: ""

  max:
    python_interpreter: "/var/python/python2.7/bin/python" # which python will be used to bootstrap the buildout
    cfg_file: "max-only.cfg"             # cfg file that will be used to create this max
    server_dns: ""                       # public dns where this max server is located, used to generate nginx configurations
    server: ""                           # address of server where oauths are located, used to access by ssh
    ssh_user: "root"                     # username to use to access by ssh to server, keyfile access must be enabled
    local_git_branch: "local"            # Name of branch where to store custom configurations
    instances_root: "/var/max"           # Path to the root folder where all oauth instances are created
    process_uid: "pyramid"               # Name of user that will own the oauth process
    authorized_user:                    # user that will initially get the Manager role on max
    nginx:                               # Settings to access the server where nginx is installed, used to add new instances
      root: "/var/nginx"
      server: ""
      ssh_user: "root"
    supervisor:                          # Location and settings of the supervisor process that will control oauth
      path: "/var/supervisor"
      port: "13001"
      password: ""

  genweb:
    server: ""
    server_dns: ""
    prefe_ssh_user: "root"
    prefe_server: ""
    environments:
      - name: "A"
        server: ""
        admin_username: "admin"
        admin_password: ""

  ulearn:
    server: ""
    server_dns: ""
    prefe_nginx_root: "/var/nginx"
    prefe_server: ""
    prefe_ssh_user: "root"
    environments:
      - name: "A"
        server: ""
        admin_username: "admin"
        admin_password: ""
        ssh_user: "root"
        log_folder: "/var/plone/genweb.zope/var/log"
        instance_name: "zc1"

  rabbitmq:
    server: ""                          # address of server to talk to rabbitmq
    port: "5672"                        # port of amqp protocol endpoint
    username: "admin"                   # username of a rabbimq user with administrator role
    password: ""                        # password for username

  maxbunny:
    server: ""                          # address of server where maxbunny is installed
    ssh_user: "root"                    # username to use to access by ssh to server, keyfile access must be enabled
    instances_list: "/var/maxbunny/config/instances.ini" # Location of domains list, used to add new instances when a max is added

  mongodb:
    cluster: ""                         # hosts of this replicaset cluster, host1:port,host2:port, port not needed if standard 27017
    replica_set: ""                     # name of the replicaset
    authdb: "admin"                     # Database to centraly authenticate against, to access any other database
    username: "admin"                   # Username to manage databases
    password: ""                        # password for username
